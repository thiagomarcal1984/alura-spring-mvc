Dependências para instalar ao usar o start.spring.io:
    Spring Web
    Thymeleaf
    Spring Boot DevTools

O arquivo application.properties tem uma propriedade que define a porta que 
vai ser usada ao rodar o Spring Boot:
		server.port: 80

Depois que você inicia o SpringBoot (mvn spring-boot:run / etc.) ele faz 
redeploy automaticamente a cada arquivo salvo.

Funcionamento do Controller no Spring:
    Cada método no Controller deve retornar uma String, que corresponde à view
    que vai ser invocada de dentro da pasta templates (no exemplo, hello.html).

    A classe Controller precisa da anotação @Controller. Cada método da classe
    anotada vai ser uma action. Cada ação/método precisa da anotação de 
    mapeamento (@GetMapping, @PostMapping etc.). O parâmetro value (o default)
    dessa anotação representa a URI que vai ser usada para acessar a view.

        // Exemplo de ação dentro do Controller:
        @GetMapping(value = "hello")
        public String hello(HttpServletRequest request) {
            String nome = request.getParameter("nome");
            if (nome == "" || nome == null)
                nome = "Mundo";
            request.setAttribute("nome", nome);
            return "hello";
        }

    Outra forma de definir atributos é fornecendo um objeto Model como 
    parâmetro para a ação:

        @GetMapping(value = "hello")
        public String hello(Model model) {
            String nome =  "Mundo";
            model.addAttribute("nome", nome);
            return "hello";
        }    

Básico do Thymeleaf:
    Parâmetros que estão na requisição podem ser acessados pela view através
    da seguinte sintaxe:
        <tag th:text="${nomeDaVariavel}>Valor Default</tag>

    O HTML usado pelo Thymeleaf pode ser visto/editado sem precisar de um
    servidor Web para mostrar seu conteúdo. Veja o Valor Default na tag do
    exemplo acima.

    Iterações em uma lista: use o atributo th:each="varLocal : ${list}":
        <div th:each="pedido: ${pedidos}">
            <div th:text="${pedido.nomeProduto}">Nome do produto</div>
        </div>

    **** Repare que as variáveis são acessadas dentro de um ${}. ****
    **** Sem o ${}, um texto literal é inserido dentro da tag. ****
    **** Repare também que a tag que contém th:each também é repetida: ****
    **** Não é apenas o conteúdo da tag que se repete. ****

    Dentro de tags input de formulário, o atributo é *th:value*, não th:text:
        <input th:value="${pedido.urlProduto}" value="url do produto"/>

    *** Note que o atributo value e th:value não são os mesmos. ***

    O raciocínio para as tags de imagem é semelhante: use *th:src*:
        <img th:src="${pedido.urlImagem}"/>

Sistema de Grid do Bootstrap:
    Componentes do tipo Grid podem ter suas colunas estilizadas com os 
    seguintes prefixos de classe (onde n é o número de colunas de 1 a 12):
        .col-n      => para dispositivos MUITO pequenos.
        .col-sm-n   => para dispositivos pequenos.
        .col-md-n   => para dispositivos médios.
        .col-lg-n   => para dispositivos grandes.
        .col-xl-n   => para dispositivos MUITO grandes.

    *** Nota: as classe col-*-n só funcionam dentro de um componente row.

    Um componente card-body dentro de um componente card tem um padding que não
    existiria se não fosse essa classe.

    Classes para margin e padding: 
        https://getbootstrap.com/docs/5.2/utilities/spacing/

        <type>-<side>-<size>

            Type: m (margin) ou p (padding);
            Side: 
                t => top;
                b => bottom;
                s => start (esquerda);
                e => end (direita);
                x => top and bottom;
                y => start and end.
            Size:
                Números de 1 a 5 ou auto.
                
No site start.spring.io podemos apenas visualizar as dependências que 
precisamos. Vamos colocar as dependências para Spring Data JPA e MySQL Driver.
Para ver como o pom.xml vai ficar, use o botão "Explore" no site.

As configurações para acessar o MySQL usando Spring Data é explicado  no link:
https://spring.io/guides/gs/accessing-data-mysql/

Anote um EntityManager com @PersistenceContext para que a dependência seja
injetada pelo Spring.

A anotação @Autowired instancia um objeto automaticamente. Mas é importante que
a classe que vai fornecer a instância desejada também tenha alguma anotação que
permita ao Spring reconhecer a classe. Exemplos de anotações desse tipo: 
    @Controller, @Service, @Repository.

Os controllers Spring podem retornar um objeto ModelAndView ao invés de String.
Compare os códigos, eles tem a mesma saída: 

    @GetMapping(value = "/home")
    public String home(Model model) {
        List<Pedido> pedidos = pedidoRepository.findAll();
        model.addAttribute("pedidos", pedidos);
        return "home";
    }

    @GetMapping("/home")
    public ModelAndView home() {
        List<Pedido> pedidos = repository.findAll();
        ModelAndView mv = new ModelAndView("home");
        mv.addObject("pedidos", pedidos);
        return mv; 
    }   

    As "diferenças" estão nos métodos mv.addObject e model.addAttribute.

    Dessa forma, os parâmetros do método ficam reservados para os dados da 
    requisição (o input) e o retorno do método fica reservado para os dados 
    da view (o output).

A propriedade navbar-expand serve para que os elementos dentro da navbar se
expandam na horizontal, ao invés de na vertical. Se você usar algum modificador
de tamanho de dispositivo (ex.: navbar-expand-lg), os elementos do navbar só
se expandem se estiverem em um tamanho lg.

Diferença nas anotações RequestMapping e GetMapping:
    RequestMapping é anotada na **classe**. 
        Qualquer ação (GetMapping, PostMapping etc.) acrescenta esta anotação.
    GetMapping é anotada no **método** da classe.

Veja que a String de retorno da ação (GetMapping) indica o caminho relativo até
a página HTML que queremos que apareça. Exemplo: queremos o formulario.html que
está dentro de pedidos. O retorno deve ser:
    return "pedidos/formulario";

Quando trabalhamos com formulários no Spring, é necessário criarmos alguns DTOs
(Data Transfer Objects) que vão conter os parâmetros da requisição HTTP e vão
transferi-los para um objeto que será construído pelo próprio DTO.

Por que os DTOs são necessários? 

1) Porque a requisição HTTP só envia strings, e a criação de objetos Java 
complexos precisam de outros tipos além de Strings.

2) Não usar DTO abre espaço para receber mais dados da requisição do que foi 
previsto.  Como a classe Pedido têm mais atributos (o valor e a data), podemos
enviar esses dados também (ao manipular os dados da requisição). Isso é uma 
falha de segurança chamada Web Parameter Tampering.

3) Não usar DTO expõe o nosso modelo e qualquer mudança nele causaria uma 
mudança no HTML, acoplamos o código da view ao nosso modelo. Isso vai quebrar
assim que mudarmos algo no modelo. Como as alterações no modelo são constantes,
é boa prática criar as classes DTO.

As propriedades do DTO precisam ser iguais aos nomes dos parâmetros enviados 
pela requisição HTTP, para que o DTO seja preenchido pelo Spring. Não se 
esqueça dos getters e setters nos DTOs.

Semelhanças da anotação RequestMapping e GetMapping / PostMapping:
    // Este código...
        @RequestMapping(method = RequestMethod.GET, value="formulario")
        public String formulario() {
            ...
        }

        @RequestMapping(method = RequestMethod.POST, value="novo")
        public String novo(RequisicaoNovoPedido requisicao) {
            ...
        }

    // ... é igual a este: 

        @GetMapping(value="formulario")
        public String formulario() {
            ...
        }

        @PostMapping(value="novo")
        public String novo(RequisicaoNovoPedido requisicao) {
            ...
        }

******************************************************************************
Para mexer com validações, use a dependência spring-boot-starter-validation.
******************************************************************************

O Spring usa a seguinte assinatura para métodos que fazem validação: 
    @PostMapping("novo")
    public String metodo(@Valid Objeto objeto, BindingResult result) {
        ...
    }

    // Perceba a anotação @Valid no primeiro Objeto. Ele será validado.

Onde Objeto é uma classe cujas propriedades contém anotações de validação do
pacote javax.validation.constraints.

Thymeleaf: o HTML precisa associar um objeto ao formulário, e associar as 
propriedades do objeto aos controles de formulário:

    <form th:object="${requisicaoNovoPedido}" action="novo" method="POST" ...>
        ...
        <input th:field="*{nomeProduto}" ...>

    Repare que o objeto é referenciado com dólar (${objetoEmMinusculo}), mas 
    as propriedades são referenciados com estrela (*{propriedade}).

    Use atributo th:object="${objetoEmMinusculo}" no form; 
        atributo th:field="*{propriedade}" nos campos.

Ao usar th:field, os atributos id, name e value são inseridos automaticamente
dentro da tag que contém o th:field.

O acréscimo dos atributos th:object e th:field exigem da resposta um objeto
que vai ser injetado no HTML. No exemplo, se o método formulario do controller
de Pedido não parametrizar o objeto que fica th:object, vai acontecer um erro
na instanciação do objeto. 

Bootstrap: componente do tipo invalid-feedback só ficam visíveis quando o 
input relacionado for um component is-invalid:
    <div class="form-group">
        <label for="nomeProduto">Produto</label>
        <input  th:field="*{nomeProduto}" 
                class="form-control" 
                th:errorClass="is-invalid">
        <div class="invalid-feedback" th:errors="*{nomeProduto}">
            Erros do nome do produto.
        </div>
    </div>

Perceba o atributo th:errorClass: se você aplicar o estilo is-invalid 
diretamente, o input SEMPRE vai ficar aparecendo em vermelho. Colocando no
atributo th:errorClass, o estilo só é aplicado quando houver erro.

Duas formas de personalizar as mensagens de erro:
    1) Escrevendo a mensagem como parâmetro da anotação:
        @NotEmpty(message = "Este campo não pode estar em branco.")
    2) "Internacionalizando" com um arquivo resources/messages.properties:
        # Sintaxe: ClasseDeValidacao.nomeClasse.nomePropriedade
        NotBlank.requisicaoNovoPedido.nomeProduto

Salve os arquivos com o encoding UTF-8.

Anotações de Bean Validation: 
https://docs.jboss.org/hibernate/beanvalidation/spec/2.0/api/javax/validation/constraints/package-summary.html

Thymeleaf: Inserção de conteúdos vindos de um template.
No exemplo, criamos um arquivo chamado base.html, que vai conter os elementos 
a serem usados nas páginas. Esse arquivo pode ter vários componentes juntos 
(cabeçalho, rodapé, menu, barras de navegação etc.). A identificação dos 
componentes pode ser feita:
    1) por tag (ex., head);
    2) usando o atributo th:fragment="identificacao(parametro)".

Para invocar um dos componentes que estão no arquivo de template, use:
    1) <head th:replace="~{base :: head}"></head>   
        // Para tags.
    2) <div th:replace="~{base :: logo}"></div>
        // Para ids.
    3) <div th:replace="~{base :: titulo('Meus pedidos')}"></div> 
        // Para ids com parâmetro.

    Nota: Perceba o til (~) antes das chaves e a separação do nome do arquivo
    da identificacao+parâmetro com dois pontos duplicados (::).

Generalizando: 
    <tag th:replace="~{template :: nomeFragmento(parametro)}"></tag>

Existe um atributo "irmão" bem parecido, o th:insert:

    <div th:insert="~{base :: titulo('Meus Pedidos')}"></div>

A aplicação é idêntica, com a diferença que o th:insert não substitui a div 
original e sim joga todo o conteúdo dentro dela.

O Spring tem uma String para redirecionamento nos métodos que retornam String:
    return "redirect:/urlInterna.

Thymeleaf: switch/case:
    <th:block th:switch="${objeto.propriedade}">
        <div th:case="'S1'" class="warning" 
            th:text="${objeto.propriedade}">S1</div>
        <div th:case="'S2'" class="success" 
            th:text="${objeto.propriedade}">S2</div>
        <div th:case="'S3'" class="dark" 
            th:text="${objeto.propriedade}">S3</div>
    </th:block>

É possível fornecer os parâmetros da URI nos métodos do controller. Para isso,
é necessário inserir o nome da variável em GetMapping da URL e referenciar a
String na assinatura do método com a anotação PathVariable:

    @GetMapping("/{status}")
    public String porStatus(@PathVariable("status") String status, Model model) {
        ...
    }

    Perceba que em GetMapping o parâmetro da URI é envolvido por chaves, sem 
    caracteres precedentes ($, ~ etc.).

ExceptionHandler: é uma anotação que é usada no Spring para tratar exceções.
É necessário fornecer como parâmetro para a ExceptionHandler o nome da classe
que corresponde à exceção que se quer tratar:

    @ExceptionHandler(IllegalArgumentException.class)
    public String metodoParaTratarArgumentoIlegal() {
        return "redirect:/home";
    }

    O nome do método não interfere na captura da exceção.

Thymeleaf: para definir quais links ficarão ativos, usamos o atributo 
th:classappend, junto com um operador ternário para teste:
    <a th:classappend="${status} == null ? 'active'" 
        href="todos">Todos</a>
    <a th:classappend="${status} == 'aguardando' ? 'active'" 
        href="aguardando">Aguardando</a>

As bibliotecas de formatação de data do Thymeleaf dependem do tipo de objeto 
de data que é recebido (Calendar, Date, LocalDate). As bibliotecas  para elas 
são #calendars, #dates e #temporals, respectivamente.

Formatação de números: 
    Valor: <span th:text="${'R$ ' + 
                #numbers.formatDecimal(
                    pedido.valorNegociado, 1, 
                    'POINT', 2, 'COMMA'
            )}">
                200,99
            </span></div>
    
    Repare que dentro de ${} existe uma concatenação, para forçar o R$.

O Thymeleaf também tem o método #numbers.formatCurrency, que recebe um número
como parâmetro e retorna o valor com o formato da moeda do local do browser.

Condicionais para exibição: th:if e th:unless.
    th:if       = Exibe o conteúdo se a condição for verdadeira.
    th:unless   = Exibe o conteúdo se a condição for falsa.

**************************************************************
Forward (Server-Side) vs Redirect (Client-Side)
Forward não repete requisição; redirect cria nova requisição.
**************************************************************

Na aula, vimos o prefixo redirect na action:

    @PostMapping("novo")
    public String novo( @Valid RequisicaoNovoPedido requisicao, 
                        BindingResult result) {
        if(result.hasErrors()) {
            return "pedido/formulario";
        }

        Pedido pedido = requisicao.toPedido();
        pedidoRepository.save(pedido);

        return "redirect:/home";
    }

Nesse caso, o Spring MVC executará o redirecionamento client-side. Isto é, ele
devolve uma resposta HTTP para pedir uma nova requisição para a URL /home.

Também existe o redirecionamento server-side, mas devemos usar o prefixo 
forward. Veja o código:

    @PostMapping("novo")
    public String novo( @Valid RequisicaoNovoPedido requisicao, 
                        BindingResult result) {
        if(result.hasErrors()) {
            return "pedido/formulario";
        }

        Pedido pedido = requisicao.toPedido();
        pedidoRepository.save(pedido);

        return "forward:/home";
    }

Nesse caso, o fluxo volta apenas para o Front-Controller do Spring MVC e ele 
chama a nova action. Enquanto o redirecionamento client-side causa uma nova 
requisição, o server-side continua dentro da mesma requisição HTTP.

Nesse exemplo, o melhor seria usar redirect, pois estamos trabalhando com uma 
requisição POST, seguindo a regra: "always redirect after post".
