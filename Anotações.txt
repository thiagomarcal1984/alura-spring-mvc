Dependências para instalar ao usar o start.spring.io:
    Spring Web
    Thymeleaf
    Spring Boot DevTools

O arquivo application.properties tem uma propriedade que define a porta que 
vai ser usada ao rodar o Spring Boot:
		server.port: 80

Depois que você inicia o SpringBoot (mvn spring-boot:run / etc.) ele faz 
redeploy automaticamente a cada arquivo salvo.

Funcionamento do Controller no Spring:
    Cada método no Controller deve retornar uma String, que corresponde à view
    que vai ser invocada de dentro da pasta templates (no exemplo, hello.html).

    A classe Controller precisa da anotação @Controller. Cada método da classe
    anotada vai ser uma action. Cada ação/método precisa da anotação de 
    mapeamento (@GetMapping, @PostMapping etc.). O parâmetro value (o default)
    dessa anotação representa a URI que vai ser usada para acessar a view.

        // Exemplo de ação dentro do Controller:
        @GetMapping(value = "hello")
        public String hello(HttpServletRequest request) {
            String nome = request.getParameter("nome");
            if (nome == "" || nome == null)
                nome = "Mundo";
            request.setAttribute("nome", nome);
            return "hello";
        }

    Outra forma de definir atributos é fornecendo um objeto Model como 
    parâmetro para a ação:

        @GetMapping(value = "hello")
        public String hello(Model model) {
            String nome =  "Mundo";
            model.addAttribute("nome", nome);
            return "hello";
        }    

Básico do Thymeleaf:
    Parâmetros que estão na requisição podem ser acessados pela view através
    da seguinte sintaxe:
        <tag th:text="${nomeDaVariavel}>Valor Default</tag>

    O HTML usado pelo Thymeleaf pode ser visto/editado sem precisar de um
    servidor Web para mostrar seu conteúdo. Veja o Valor Default na tag do
    exemplo acima.

    Iterações em uma lista: use o atributo th:each="varLocal : ${list}":
        <div th:each="pedido: ${pedidos}">
            <div th:text="${pedido.nomeProduto}">Nome do produto</div>
        </div>

    **** Repare que as variáveis são acessadas dentro de um ${}. ****
    **** Sem o ${}, um texto literal é inserido dentro da tag. ****
    **** Repare também que a tag que contém th:each também é repetida: ****
    **** Não é apenas o conteúdo da tag que se repete. ****

    Dentro de tags input de formulário, o atributo é *th:value*, não th:text:
        <input th:value="${pedido.urlProduto}" value="url do produto"/>

    *** Note que o atributo value e th:value não são os mesmos. ***

    O raciocínio para as tags de imagem é semelhante: use *th:src*:
        <img th:src="${pedido.urlImagem}"/>
